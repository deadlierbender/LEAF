<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html slick-uniqueid="3" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" dir="ltr" lang="en-gb"><head>
<script src="FMXClient.h_files/ga.js" async="" type="text/javascript"></script><script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-34699114-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	  <!-- base href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxclient-h" -->
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="keywords" content="productie, podiumkunsten, cultuur, cultuursector, copywriter, teksten, tekstschrijver, programmatoelichting, programmaboek, redactie, redacteur,planning, concerten, festivals, subsidieaanvragen, ensembles, Filemaker sdk headers, filemaker, sdk, filemaker api, api, plug-ins, plug-in, filemaker plug-in, filemaker plug-ins, ">
  <meta name="author" content="Super User">
  <meta name="description" content="Van der Linden Cultural Services levert diensten in de cultuursector. U kunt terecht voor teksten (zakelijk en informatief), productie en stage management in de podiumkunsten, Filemaker-database-development, transport, etc.">
  <meta name="generator" content="Joomla! - Open Source Content Management">
  <title>Van der Linden Cultural Services - FMXClient.h</title>
  <link href="http://culturalservices.nl/index.php/component/search/?Itemid=537&amp;format=opensearch" rel="search" title="Search Van der Linden Cultural Services" type="application/opensearchdescription+xml">
  <link rel="stylesheet" href="FMXClient.h_files/highslide.css" type="text/css">
  <link rel="stylesheet" href="FMXClient.h_files/highslide-sitestyles.css" type="text/css">
  <link rel="stylesheet" href="FMXClient.h_files/shCoreEclipse.css" type="text/css">
  <link rel="stylesheet" href="FMXClient.h_files/shThemeEclipse.css" type="text/css">
  <script src="FMXClient.h_files/mootools-core.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/core.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/caption.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/highslide-full.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/easing_equations.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/swfobject.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/en.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/highslide-sitesettings.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/shCore.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/shBrushCpp.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/shBrushCSharp.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/shBrushCss.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/shBrushJava.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/shBrushJScript.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/shBrushPhp.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/shBrushPlain.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/shBrushXml.js" type="text/javascript"></script>
  <script src="FMXClient.h_files/mootools-more.js" type="text/javascript"></script>
  <script type="text/javascript">
window.addEvent('load', function() {
				new JCaption('img.caption');
			});
hs.graphicsDir = '/plugins/content/highslide/graphics/';

			  SyntaxHighlighter.all();
		 
  </script>

	<!-- The following line loads the template CSS file located in the template folder. -->
	<link rel="stylesheet" href="FMXClient.h_files/template.css" type="text/css">
<style type="text/css">.highslide img {cursor: url(/plugins/content/highslide/graphics/zmin.cur), pointer !important;}.highslide-viewport-size {position: fixed; width: 100%; height: 100%; left: 0; top: 0}</style></head>
<body id="page_bg">

	<div class="top-menu">
		<div id="sgmenu">
			
		</div>
	</div>

	<div id="mainwrap">
	<div id="header">
	

	
	
		<div id="search">
			<form action="/index.php/filemaker-plug-ins/fmxclient-h" method="post">
	<div class="search">
		<label for="mod-search-searchword">Search...</label><input name="searchword" id="mod-search-searchword" maxlength="20" class="inputbox" size="20" value="Search..." onblur="if (this.value=='') this.value='Search...';" onfocus="if (this.value=='Search...') this.value='';" type="text">	<input name="task" value="search" type="hidden">
	<input name="option" value="com_search" type="hidden">
	<input name="Itemid" value="537" type="hidden">
	</div>
</form>

		</div>
	
		<h1><a href="http://www.culturalservices.nl/index.php/filemaker-plug-ins">Filemaker Plug-Ins</a></h1>					
		
	</div>
	<div id="wrapper">
		<div id="content_m">
						<div class="maincol_w_left">
						
									<div class="leftcol">
								<div class="module">
			<div>
				<div>
					<div>
													<h3>Filemaker</h3>
											








<ul class="menu">




<li id="item-535" class="active parent"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins"><span>Filemaker SDK headers</span></a><ul><li id="item-532"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxextern-h"><span>FMXExtern.h</span></a></li><li id="item-537" class="current active"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxclient-h"><span>FMXClient.h</span></a></li><li id="item-538"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/datetime-h"><span>FMXDateTime.h</span></a></li><li id="item-539"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxfixpt-h"><span>FMXFixPt.h</span></a></li><li id="item-540"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxtextstyle-h"><span>FMXTextStyle.h</span></a></li><li id="item-542"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxtypes-h"><span>FMXTypes.h</span></a></li><li id="item-545"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxbinarydata-h"><span>FMXBinaryData.h</span></a></li><li id="item-546"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxtext-h"><span>FMXText.h</span></a></li><li id="item-543"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxdata-h"><span>FMXData.h</span></a></li><li id="item-544"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxcalcengine-h"><span>FMXCalcEngine.h</span></a></li></ul></li><li id="item-536"><a href="http://culturalservices.nl/index.php/resources"><span>Resources</span></a></li></ul>					</div>
				</div>
			</div>
		</div>
	
					</div>
					
						<div class="cont">
							<div class="item-page">

	<h2>
			<a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxclient-h">
		FMXClient.h</a>
		</h2>








<p><code class="brush:cpp">
delete
</code><code class="brush:cpp">
delete
</code></p>
<p>The FMXClient.h includes three headers from the standard library (and the FMXExtern.h header). These are:</p>
<div><div id="highlighter_95174" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">#include &lt;stdexcept&gt;</code></div><div class="line number2 index1 alt1"><code class="cpp plain">#include &lt;memory&gt;</code></div><div class="line number3 index2 alt2"><code class="cpp plain">#include &lt;</code><code class="cpp keyword bold">new</code><code class="cpp plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="cpp plain">#include </code><code class="cpp string">"FMWrapper/FMXExtern.h"</code></div></div></td></tr></tbody></table></div></div>
<p>Header &lt;stdexcept&gt; contains exception classes. These standard 
exceptions can be used to report common errors. This header includes the
 header&nbsp;&lt;exception&gt; which contains the class <code class="brush:cpp">
exception</code>. This is a general exception used in FMXClient.h. The 
reason why &lt;stdexcept&gt; is included, instead of simply 
&lt;exception&gt;, is unclear. You cannot use the specialized standard 
exceptions of &lt;stdexcept&gt;. You are only able to use the one in 
&lt;exception&gt;.</p>
<p>Header &lt;memory&gt; contains memory elements: several methods to manage dynamic memory. It contains the <code class="brush:cpp">
auto_ptr
</code>class template.</p>
<p>Header &lt;new&gt; contains esveral function to manage dynamic storage,&nbsp; of which&nbsp;the <code class="brush:cpp">
new
</code>and <code class="brush:cpp">delete</code> keywords are the most well-known. It also contains an exception that can be thrown, called&nbsp;<code class="brush:cpp">bad_alloc</code>, which is derived from <code class="brush:cpp">
exception</code>.</p>
<p>The FMXClient.h header consists of&nbsp;one struct called <code class="brush:cpp">
_fmxcpt</code>. It is wrapped in a&nbsp;<code class="brush:cpp">
extern "C++"
</code> block to explicitly indicate that everything in the header can be C++-linked as usual. It also wrapped in <code class="brush:cpp">
namespace fmx</code>.</p>
<p>The struct has the following structure.</p>
<div><div id="highlighter_748575" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp comments">// This is used by other files for exception handling.</code></div><div class="line number2 index1 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">_fmxcpt</code></div><div class="line number3 index2 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">{</code></div><div class="line number4 index3 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">enum</code></div><div class="line number5 index4 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">{</code></div><div class="line number6 index5 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kNoErr,</code></div><div class="line number7 index6 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kBadAlloc,</code></div><div class="line number8 index7 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kUnknown</code></div><div class="line number9 index8 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">};</code></div><div class="line number10 index9 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">inline</code> <code class="cpp plain">_fmxcpt ()</code></div><div class="line number12 index11 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">: m_vers ( 1 )</code></div><div class="line number13 index12 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">, m_code ( kNoErr )</code></div><div class="line number14 index13 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">{</code></div><div class="line number15 index14 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number16 index15 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number17 index16 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">inline</code> <code class="cpp keyword bold">void</code> <code class="cpp plain">Check ()</code></div><div class="line number18 index17 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">{</code></div><div class="line number19 index18 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">switch</code> <code class="cpp plain">( m_code )</code></div><div class="line number20 index19 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">{</code></div><div class="line number21 index20 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">case</code> <code class="cpp plain">kNoErr:</code></div><div class="line number22 index21 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">break</code><code class="cpp plain">;</code></div><div class="line number23 index22 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">case</code> <code class="cpp plain">kBadAlloc:</code></div><div class="line number24 index23 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">throw</code> <code class="cpp plain">std::bad_alloc ();</code></div><div class="line number25 index24 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">case</code> <code class="cpp plain">kUnknown:</code></div><div class="line number26 index25 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">throw</code> <code class="cpp plain">std::exception ();</code></div><div class="line number27 index26 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number28 index27 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number29 index28 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number30 index29 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">int32 m_vers;</code></div><div class="line number31 index30 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">int32 m_code;</code></div><div class="line number32 index31 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">};</code></div></div></td></tr></tbody></table></div></div>
<p>&nbsp;The struct contains the following members:</p>
<ol>
<li>An enumeration</li>
<li>an inline constructor</li>
<li>a function</li>
<li>two variables</li>
</ol>
<p>The two variables are <code class="brush:cpp">
m_vers
</code>and <code class="brush:cpp">
m_code</code>. Both are 32 bit ints.</p>
<p>The enumeration contains the values of the exceptions that can be used for the member <code class="brush:cpp">
m_code</code>: <code class="brush:cpp">
kNoErr
</code>when nothing out of the ordinary has happened, <code class="brush:cpp">
kBadAlloc
</code>if memory is badly allocated, and <code class="brush:cpp">
kUnknown
</code>if there was an unknow error.</p>
<p>The inline constructor initializes the variables every time a new _fmxcpt is created. To give an example:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><code class="brush:cpp"></code></p>
<p><code class="brush:cpp">
</code></p><div><div id="highlighter_380497" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">&lt;code </code><code class="cpp keyword bold">class</code><code class="cpp plain">=</code><code class="cpp string">"brush:cpp"</code><code class="cpp plain">&gt;_fmxcpt x; </code></div><div class="line number2 index1 alt1"><code class="cpp plain">&lt;/code&gt;</code></div></div></td></tr></tbody></table></div></div><code class="brush:cpp">
</code><p></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The inline keyword translates this to:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><code class="brush:cpp"></code></p>
<p><code class="brush:cpp">
</code></p><div><div id="highlighter_113257" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">&lt;code </code><code class="cpp keyword bold">class</code><code class="cpp plain">=</code><code class="cpp string">"brush:cpp"</code><code class="cpp plain">&gt;_fmcpt():m_vers(1),m_code(kNoErr){}; </code></div><div class="line number2 index1 alt1"><code class="cpp plain">&lt;/code&gt;</code></div></div></td></tr></tbody></table></div></div><code class="brush:cpp">
</code><p></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Now the&nbsp;<code class="brush:cpp">_fmxcpt</code>&nbsp;is constructed and it has its two members <code class="brush:cpp">
m_vers</code> and <code class="brush:cpp">
m_code </code>initialized to&nbsp;<code class="brush:cpp">1</code>&nbsp;and <code class="brush:cpp">
kNoErr</code>. The&nbsp;use of&nbsp; member, however, is clear. Once the struct is initialized it should start off with the <code class="brush:cpp">m_code</code> error code&nbsp;<code class="brush:cpp">
kNoErr</code>.&nbsp;The struct&nbsp;is used in several headers as an argument (an&nbsp;<code class="brush:cpp">_fmxcpt</code>
 pointer) to external funtions that are not defined&nbsp;in the SDK. In 
all cases, these functions are defined in the Filemaker application, not
 in your plug-in.</p>
<p>In their definition, the <code class="brush:cpp">_fmxcpt</code> parameter is used to set the member&nbsp;<code class="brush:cpp">m_code</code>
 to one of the other two values of the enumeration in 
case&nbsp;Filemaker wants an exception to be thrown. Once the function 
returns the <code class="brush:cpp">_fmxcpt</code> contains the error code and a <code class="brush:cpp">
Check()</code> should be done to known whether an exception should be 
thrown. The Check function of the struct throws an exception when 
the&nbsp;<code class="brush:cpp">m_code</code> is not <code class="brush:cpp">
kNoErr</code>. The exceptions thrown are those from the &lt;exception&gt; and &lt;new&gt;&nbsp;headers. The <code class="brush:cpp">
throw std::bad_alloc ()</code> constructs an object of type&nbsp;<code class="brush:cpp">bad_alloc</code>&nbsp;and checks whether it is created within a&nbsp;<code class="brush:cpp">try</code> block. If so, it looks where the&nbsp;<code class="brush:cpp">
try
</code>blocks ends in a <code class="brush:cpp">
catch</code>&nbsp;and throws the&nbsp;exception. Because there is no 
try-catch block in the SDK files, it is in Filemaker that the exception 
is caught. This is Filemaker's way to ensure that exceptions are handled
 in its own way, and you don't have to worry about that&nbsp;when the <code class="brush:cpp">_fmxcpt</code>
 struct is used. Still, although the exceptions are caught in 
Filemaker&nbsp;when Filemaker encounters an internal error, the actual 
throw takes place in your plug-in. You&nbsp;will never know where 
exactly Filemaker&nbsp;encountered an error. You do know it was thrown 
in your plug-in, so you can start debugging.</p>
<p>How do the SDK headers implement the <code class="brush:cpp">_fmxcpt</code> struct? We will examine a function that we'll find in header <a href="http://culturalservices.nl/index.php/filemaker-plug-ins/datetime-h">FMXDateTime.h</a>.</p>
<p>
</p><div><div id="highlighter_39783" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">fmx::int16 FMX_API FM_DateTime_DayOfWeek ( </code><code class="cpp keyword bold">const</code> <code class="cpp keyword bold">void</code> <code class="cpp plain">*_self, fmx::_fmxcpt &amp;_x ) </code><code class="cpp keyword bold">throw</code> <code class="cpp plain">();</code></div></div></td></tr></tbody></table></div></div>
<p>This a function declaration with macro <code class="brush:cpp">
FMX_API</code>. From the description of the <code class="brush:cpp">
FMX_API</code> in <a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxextern-h">FMXExtern.h</a>&nbsp;we learned that this is a function that is defined outside our plug-in, in Filemaker. We can use the function <code class="brush:cpp">
FM_DateTime_DayOfWeek</code> to let Filemaker compute the number of the day in a week (Monday = 1, Thuesday = 2) given a parameter <code class="brush:cpp">
const void *_self</code>, which is a class.&nbsp;(The pointer is of type <code class="brush:cpp">
void</code>, whereas what is passed to it, as we will see, is a class.)</p>
<p>The most peculiar thing about this function declaration is the addition of <code class="brush:cpp">
throw()</code>. When this is added to a function it tells the compiler 
to suppress any exceptions that would be thrown while executing the 
function. So, no exception will ever be thrown while the function 
executes in the Filemaker application. Filemaker wants your plug-in to 
deal with exceptions, so you pass it the address of the <code class="brush:cpp">_fmxcpt</code>
 struct, and Filemaker can use that to tell your plug-in whether there 
was an exception. That is what the&nbsp;second parameter is for: the 
address of a&nbsp;<code class="brush:cpp">_fmxcpt</code> struct.</p>
<p>Now we can look at where this function is called.</p>
<div><div id="highlighter_354020" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp keyword bold">inline</code> <code class="cpp plain">int16 DateTime::DayOfWeek () </code><code class="cpp keyword bold">const</code></div><div class="line number2 index1 alt1"><code class="cpp plain">{</code></div><div class="line number3 index2 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">_fmxcpt _x;</code></div><div class="line number4 index3 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">int16 _rtn = FM_DateTime_DayOfWeek ( </code><code class="cpp keyword bold">this</code><code class="cpp plain">, _x );</code></div><div class="line number5 index4 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">_x.Check ();</code></div><div class="line number6 index5 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code> <code class="cpp plain">_rtn;</code></div><div class="line number7 index6 alt2"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>
<p>This is a class method of the class <code class="brush:cpp">
DateTime</code>. The method returns an <code class="brush:cpp">
int16</code> (a <code class="brush:cpp">
short</code>) that contains the day of the week we want to have. Whenever we call this function it does the following:</p>
<ol>
<li>It creates an <code class="brush:cpp">_fmxcpt</code> struct (called <code class="brush:cpp">_x</code>) with its members initialize to 1 and <code class="brush:cpp">
kNoErr</code>.</li>
<li>It calls the Filemaker function&nbsp;<code class="brush:cpp">FM_DateTime_DayOfWeek
</code> and passes it a pointer to the class instance from which the function is called (the <code class="brush:cpp">this </code>keyword, which is a pointer to the class that currently makes the call,&nbsp;does that) and the (address of the) initialized <code class="brush:cpp">_fmxcpt</code> struct.</li>
<li>Filemaker does dome thing in the function and, if it encounters an error, it will put the appropriate value in the <code class="brush:cpp">
m_code</code> member of the struct.</li>
<li>When the <code class="brush:cpp">
FM_DateTime_DayOfWeek</code> function returns, the <code class="brush:cpp">
_x</code> performs its member function <code class="brush:cpp">
Check()</code>. If Filemaker has changed the <code class="brush:cpp">
kNoErr</code>&nbsp;to another value of the enumeration, an exception will be thrown.</li>
</ol>
<p>The&nbsp;<code class="brush:cpp">m_vers</code> member&nbsp;does not 
seem to have a purpose. It is probably there for forward compatibility 
reasons. Currently, this struct-member is always initialized as 1. 
Future SDK's might have the number 2. Filemaker could then check whether
 1 is the version of the struct being passed to it and do the old error 
check or, if it is two, do the new error check.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p></p>
	
</div>

						</div>
					
								<div class="clr"></div>
			</div>
		</div>
		<div id="footer">
			<p style="text-align:center;">
 	Van der Linden Cultural Services, Powered by <a href="http://joomla.org/" class="sgfooter" target="_blank">Joomla!</a>

	

	
	

</p>
		</div>
		</div>
	</div>
	<div id="footergrad">&nbsp;</div>

<div style="padding: 0px; border: medium none; margin: 0px; position: absolute; left: 0px; top: 0px; width: 100%; z-index: 1001; direction: ltr;" class="highslide-container"><a style="position: absolute; top: -9999px; opacity: 0.75; z-index: 1;" href="javascript:;" title="Click to cancel" class="highslide-loading">Loading...</a><div style="display: none;"></div><div style="padding: 0px; border: medium none; margin: 0px; visibility: hidden;" class="highslide-viewport highslide-viewport-size"></div><table style="padding: 0px; border: medium none; margin: 0px; visibility: hidden; position: absolute; border-collapse: collapse; width: 0px;" cellspacing="0"><tbody style="padding: 0px; border: medium none; margin: 0px;"><tr style="padding: 0px; border: medium none; margin: 0px; height: auto;"><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll 0px 0px; height: 20px; width: 20px;"></td><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll 0px -40px; height: 20px; width: 20px;"></td><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll -20px 0px; height: 20px; width: 20px;"></td></tr><tr style="padding: 0px; border: medium none; margin: 0px; height: auto;"><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll 0px -80px; height: 20px; width: 20px;"></td><td class="drop-shadow highslide-outline" style="padding: 0px; border: medium none; margin: 0px; position: relative;"></td><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll -20px -80px; height: 20px; width: 20px;"></td></tr><tr style="padding: 0px; border: medium none; margin: 0px; height: auto;"><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll 0px -20px; height: 20px; width: 20px;"></td><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll 0px -60px; height: 20px; width: 20px;"></td><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll -20px -20px; height: 20px; width: 20px;"></td></tr></tbody></table></div></body></html>