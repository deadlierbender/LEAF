<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html slick-uniqueid="3" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" dir="ltr" lang="en-gb"><head>
<script src="FMXTextStyle.h_files/ga.js" async="" type="text/javascript"></script><script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-34699114-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
	  <!-- base href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxtextstyle-h" -->
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="keywords" content="productie, podiumkunsten, cultuur, cultuursector, copywriter, teksten, tekstschrijver, programmatoelichting, programmaboek, redactie, redacteur,planning, concerten, festivals, subsidieaanvragen, ensembles, Filemaker sdk headers, filemaker, sdk, filemaker api, api, plug-ins, plug-in, filemaker plug-in, filemaker plug-ins, ">
  <meta name="author" content="Super User">
  <meta name="description" content="Van der Linden Cultural Services levert diensten in de cultuursector. U kunt terecht voor teksten (zakelijk en informatief), productie en stage management in de podiumkunsten, Filemaker-database-development, transport, etc.">
  <meta name="generator" content="Joomla! - Open Source Content Management">
  <title>Van der Linden Cultural Services - FMXTextStyle.h</title>
  <link href="http://culturalservices.nl/index.php/component/search/?Itemid=540&amp;format=opensearch" rel="search" title="Search Van der Linden Cultural Services" type="application/opensearchdescription+xml">
  <link rel="stylesheet" href="FMXTextStyle.h_files/highslide.css" type="text/css">
  <link rel="stylesheet" href="FMXTextStyle.h_files/highslide-sitestyles.css" type="text/css">
  <link rel="stylesheet" href="FMXTextStyle.h_files/shCoreEclipse.css" type="text/css">
  <link rel="stylesheet" href="FMXTextStyle.h_files/shThemeEclipse.css" type="text/css">
  <script src="FMXTextStyle.h_files/mootools-core.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/core.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/caption.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/highslide-full.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/easing_equations.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/swfobject.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/en.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/highslide-sitesettings.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/shCore.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/shBrushCpp.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/shBrushCSharp.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/shBrushCss.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/shBrushJava.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/shBrushJScript.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/shBrushPhp.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/shBrushPlain.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/shBrushXml.js" type="text/javascript"></script>
  <script src="FMXTextStyle.h_files/mootools-more.js" type="text/javascript"></script>
  <script type="text/javascript">
window.addEvent('load', function() {
				new JCaption('img.caption');
			});
hs.graphicsDir = '/plugins/content/highslide/graphics/';

			  SyntaxHighlighter.all();
		 
  </script>

	<!-- The following line loads the template CSS file located in the template folder. -->
	<link rel="stylesheet" href="FMXTextStyle.h_files/template.css" type="text/css">
<style type="text/css">.highslide img {cursor: url(/plugins/content/highslide/graphics/zmin.cur), pointer !important;}.highslide-viewport-size {position: fixed; width: 100%; height: 100%; left: 0; top: 0}</style></head>
<body id="page_bg">

	<div class="top-menu">
		<div id="sgmenu">
			
		</div>
	</div>

	<div id="mainwrap">
	<div id="header">
	

	
	
		<div id="search">
			<form action="/index.php/filemaker-plug-ins/fmxtextstyle-h" method="post">
	<div class="search">
		<label for="mod-search-searchword">Search...</label><input name="searchword" id="mod-search-searchword" maxlength="20" class="inputbox" size="20" value="Search..." onblur="if (this.value=='') this.value='Search...';" onfocus="if (this.value=='Search...') this.value='';" type="text">	<input name="task" value="search" type="hidden">
	<input name="option" value="com_search" type="hidden">
	<input name="Itemid" value="540" type="hidden">
	</div>
</form>

		</div>
	
		<h1><a href="http://www.culturalservices.nl/index.php/filemaker-plug-ins">Filemaker Plug-Ins</a></h1>					
		
	</div>
	<div id="wrapper">
		<div id="content_m">
						<div class="maincol_w_left">
						
									<div class="leftcol">
								<div class="module">
			<div>
				<div>
					<div>
													<h3>Filemaker</h3>
											








<ul class="menu">




<li id="item-535" class="active parent"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins"><span>Filemaker SDK headers</span></a><ul><li id="item-532"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxextern-h"><span>FMXExtern.h</span></a></li><li id="item-537"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxclient-h"><span>FMXClient.h</span></a></li><li id="item-538"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/datetime-h"><span>FMXDateTime.h</span></a></li><li id="item-539"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxfixpt-h"><span>FMXFixPt.h</span></a></li><li id="item-540" class="current active"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxtextstyle-h"><span>FMXTextStyle.h</span></a></li><li id="item-542"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxtypes-h"><span>FMXTypes.h</span></a></li><li id="item-545"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxbinarydata-h"><span>FMXBinaryData.h</span></a></li><li id="item-546"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxtext-h"><span>FMXText.h</span></a></li><li id="item-543"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxdata-h"><span>FMXData.h</span></a></li><li id="item-544"><a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxcalcengine-h"><span>FMXCalcEngine.h</span></a></li></ul></li><li id="item-536"><a href="http://culturalservices.nl/index.php/resources"><span>Resources</span></a></li></ul>					</div>
				</div>
			</div>
		</div>
	
					</div>
					
						<div class="cont">
							<div class="item-page">

	<h2>
			<a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxtextstyle-h">
		FMXTextStyle.h</a>
		</h2>








<p>The FMXTextStyle.h header is can be used to give a style to text. It contains the class<code class="brush:cpp">
CharacterStyle</code> which has a member class called&nbsp;<code class="brush:cpp">Color</code>. In order to create and access these two classes, the header also contains the <code class="brush:cpp">
ColorAutoPtr</code> and <code class="brush:cpp">
CharacterStyleAutoPtr</code>.</p>
<p>The <code class="brush:cpp">
CharacterStyle
</code>class starts with several type definitions. The new types that are defined here are used throughout this header.</p>
<div><div id="highlighter_819873" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp keyword bold">typedef</code> <code class="cpp plain">unsigned </code><code class="cpp color1 bold">short</code> <code class="cpp plain">Face;</code></div><div class="line number2 index1 alt1"><code class="cpp keyword bold">typedef</code> <code class="cpp plain">unsigned </code><code class="cpp color1 bold">short</code> <code class="cpp plain">FontID;</code></div><div class="line number3 index2 alt2"><code class="cpp keyword bold">typedef</code> <code class="cpp plain">unsigned </code><code class="cpp color1 bold">short</code> <code class="cpp plain">FontSize;</code></div><div class="line number4 index3 alt1"><code class="cpp keyword bold">typedef</code> <code class="cpp plain">unsigned </code><code class="cpp color1 bold">char</code> <code class="cpp plain">ColorChannel;</code></div><div class="line number5 index4 alt2"><code class="cpp keyword bold">typedef</code> <code class="cpp plain">unsigned </code><code class="cpp color1 bold">short</code> <code class="cpp plain">ColorChannel16;</code></div></div></td></tr></tbody></table></div></div>
<p>The new type <code class="brush:cpp">
Face</code> is used as the typeface of&nbsp;a font and is defined as <code class="brush:cpp">
unsigned short</code>. The <code class="brush:cpp">
Face</code> that you want for a character style is&nbsp;a value from the following enumeration:</p>
<div><div id="highlighter_235963" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp keyword bold">enum</code></div><div class="line number2 index1 alt1"><code class="cpp plain">{</code></div><div class="line number3 index2 alt2"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Plain = 0,</code></div><div class="line number4 index3 alt1"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Bold = 256,</code></div><div class="line number5 index4 alt2"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Italic = 512,</code></div><div class="line number6 index5 alt1"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Underline = 1024,</code></div><div class="line number7 index6 alt2"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Outline = 2048,</code></div><div class="line number8 index7 alt1"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Shadow = 4096,</code></div><div class="line number9 index8 alt2"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Condense = 8192,</code></div><div class="line number10 index9 alt1"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Extend = 16384,</code></div><div class="line number11 index10 alt2"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Strikethrough = 1,</code></div><div class="line number12 index11 alt1"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_SmallCaps = 2,</code></div><div class="line number13 index12 alt2"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Superscript = 4,</code></div><div class="line number14 index13 alt1"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Subscript = 8,</code></div><div class="line number15 index14 alt2"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Uppercase = 16,</code></div><div class="line number16 index15 alt1"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Lowercase = 32,</code></div><div class="line number17 index16 alt2"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_Titlecase = ( kFace_Uppercase | kFace_Lowercase ),</code></div><div class="line number18 index17 alt1"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_WordUnderline = 64,</code></div><div class="line number19 index18 alt2"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_DoubleUnderline = 128,</code></div><div class="line number20 index19 alt1"><code class="cpp spaces">&nbsp;&nbsp;</code><code class="cpp plain">kFace_AllStyles = ( kFace_Plain | kFace_Bold | kFace_Italic | kFace_Underline | kFace_Outline | kFace_Shadow</code></div><div class="line number21 index20 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">| kFace_Condense | kFace_Extend | kFace_Strikethrough | kFace_SmallCaps | kFace_Superscript</code></div><div class="line number22 index21 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">| kFace_Subscript | kFace_Uppercase | kFace_Lowercase | kFace_Titlecase | kFace_WordUnderline</code></div><div class="line number23 index22 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">| kFace_DoubleUnderline )</code></div><div class="line number24 index23 alt1"><code class="cpp plain">};</code></div></div></td></tr></tbody></table></div></div>
<p>Most of these are self-explanatory. Instead of providing&nbsp;a 
single&nbsp;value, you can provide multiple values by using the pipe 
character "|", as you can see in the <code class="brush:cpp">
kFace_AllStyles</code> face.</p>
<p>The <code class="brush:cpp">
FontID</code> and <code class="brush:cpp">
FontSize</code> are also defined as <code class="brush:cpp">
unsigned short</code>. The former is assigned by Filemaker when you use a method of the class <code class="brush:cpp">
Data</code> (defined in FMXData.h) called <code class="brush:cpp">
GetFontID</code>, the latter is the size you give your charactertype. The new type <code class="brush:cpp">
ColorChannel</code> is defined as <code class="brush:cpp">
unsigned char</code> and <code class="brush:cpp">
ColorChannel16</code> is typedefined as <code class="brush:cpp">
unsigned short</code>. The first channel type is for standard resolution
 colors in which each color channel has 8 bits. Each channel can have a 
value between 0 and 255. The second channel type is for very high 
resolutions and in which each channel contains 16 bits (together three 
channels make up&nbsp;48 bits; an added 16 bit alpha channel makes for 
64 bits). Each 16-bit channel can have valeus ranging from 0 
to&nbsp;65,535.</p>
<p>The new type <code class="brush:cpp">
FontScript</code> is defined as an <code class="brush:cpp">
unsigned short</code>. Its value can be any of the following enumeration.</p>
<div><div id="highlighter_815505" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp keyword bold">enum</code></div><div class="line number2 index1 alt1"><code class="cpp plain">{</code></div><div class="line number3 index2 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kRoman&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0,</code></div><div class="line number4 index3 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kGreek&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 1,</code></div><div class="line number5 index4 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kCyrillic&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 2,</code></div><div class="line number6 index5 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kCentralEurope&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 3,</code></div><div class="line number7 index6 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kShiftJIS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 4,</code></div><div class="line number8 index7 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kTraditionalChinese&nbsp;&nbsp;&nbsp;&nbsp; = 5,</code></div><div class="line number9 index8 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kSimplifiedChinese&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 6,</code></div><div class="line number10 index9 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kOEM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 7,</code></div><div class="line number11 index10 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kSymbol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 8,</code></div><div class="line number12 index11 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kNative&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 9,</code></div><div class="line number13 index12 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kOther&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 10,</code></div><div class="line number14 index13 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kKorean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 11,</code></div><div class="line number15 index14 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kDingbats&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 12,</code></div><div class="line number16 index15 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kTurkish&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 13,</code></div><div class="line number17 index16 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kInvalidFont&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0xFFFF</code></div><div class="line number18 index17 alt1"><code class="cpp plain">};</code></div></div></td></tr></tbody></table></div></div>
<p>The next thing we find in the <code class="brush:cpp">
CharacterStyle</code> class is another class, called <code class="brush:cpp">
Color</code>. To create an object of this class we need to create a&nbsp;<code class="brush:cpp">ColorAutoPtr</code> object. The&nbsp;<code class="brush:cpp">ColorAutoPtr</code> creates an auto pointer through which you create and access a <code class="brush:cpp">
Color</code> class object. It contains the following constructors:</p>
<div><div id="highlighter_968336" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp keyword bold">class</code> <code class="cpp plain">ColorAutoPtr : </code><code class="cpp keyword bold">public</code> <code class="cpp plain">std::auto_ptr&lt;CharacterStyle::Color&gt;</code></div><div class="line number2 index1 alt1"><code class="cpp plain">{</code></div><div class="line number3 index2 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">typedef</code> <code class="cpp plain">ColorAutoPtr&nbsp;&nbsp;&nbsp; UpCaster;</code></div><div class="line number4 index3 alt1"><code class="cpp keyword bold">public</code><code class="cpp plain">:</code></div><div class="line number5 index4 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">inline</code> <code class="cpp plain">ColorAutoPtr ();</code></div><div class="line number6 index5 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">inline</code> <code class="cpp plain">ColorAutoPtr ( CharacterStyle::ColorChannel red, CharacterStyle::ColorChannel green, CharacterStyle::ColorChannel blue,</code></div><div class="line number7 index6 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">CharacterStyle::ColorChannel alpha = CharacterStyle::Color::kColorChannel_ON );</code></div><div class="line number8 index7 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">inline</code> <code class="cpp plain">ColorAutoPtr ( </code><code class="cpp keyword bold">const</code> <code class="cpp plain">CharacterStyle::Color &amp;mask );</code></div><div class="line number9 index8 alt2"><code class="cpp plain">};</code></div></div></td></tr></tbody></table></div></div>
<p>The class contains a typedef which is explained in <a href="http://culturalservices.nl/index.php/filemaker-plug-ins/datetime-h">FMXDateTime.h</a>. Apart from that, it contains three constructors. Because tha class is derived from <code class="brush:cpp">
auto_ptr</code>,&nbsp; it also inherits one of its constructors, <code class="brush:cpp">
ColorAutoPtr ( fmx::ColorAutoPtr &amp;)</code>, to which you can pass an existing <code class="brush:cpp">
ColorAutoPtr</code>&nbsp;in order to create a new one pointing to the same object. The other three constructors are defined in the derived class.</p>
<p>The first constructor is <code class="brush:cpp">
ColorAutoPtr ()</code>. This calls a <code class="brush:cpp">
Color
</code>constructor without setting any variables.</p>
<p>To the second constructor you need to pass three (and optionally 
four) arguments. The first three are the color values for Red, Green, 
and Blue, together constituting the color stored in the <code class="brush:cpp">
Color</code> object. The fourth is the alpha channel value. This is the 
transparency of the color. If this channel is set to 255, your color is 
fully exposed. If it is set to 0 the color is not visible and only the 
background behind it will show. If you do not provide a fourth argument 
it is set to kColorChannel_ON, which is one of two values is the 
enumerator list of the following enumeration.</p>
<div><div id="highlighter_676218" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp keyword bold">enum</code></div><div class="line number2 index1 alt1"><code class="cpp plain">{</code></div><div class="line number3 index2 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kColorChannel_ON = 255,</code></div><div class="line number4 index3 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">kColorChannel_OFF = 0</code></div><div class="line number5 index4 alt2"><code class="cpp plain">};</code></div></div></td></tr></tbody></table></div></div>
<p>The&nbsp;third constructor of the <code class="brush:cpp">
Color</code> class&nbsp;needs one argument, <code class="brush:cpp">
CharacterStyle::Color &amp;mask</code>. This argument is a color used&nbsp;to set the channels of the new color. A fourth constructor is inherited from <code class="brush:cpp">
auto_ptr</code> and takes a <code class="brush:cpp">
ColorAutoPtr</code> to which color&nbsp;the new autopointer is set.</p>
<p>The methods of the class <code class="brush:cpp">Color</code> are pretty easy. You can use the <code class="brush:cpp">
SetRed</code>, <code class="brush:cpp">
SetGreen</code>, and <code class="brush:cpp">
SetBlue</code>, and <code class="brush:cpp">
SetAlpha</code> to set the appropriate channels for you color. These four methods have their <code class="brush:cpp">
Get</code> counterpart to retrieve color channel values from a <code class="brush:cpp">
Color</code> object. The <code class="brush:cpp">
GetUpsample</code> methods for the four channels are used to retrieve the 16-bit color value of you color.</p>
<p>The <code class="brush:cpp">Color </code>class also contains three 
operators. The first sets one objects to the values of another object. 
The other two compare all the values in&nbsp;two objects to determine 
whether they are the same or not.</p>
<p>The methods <code class="brush:cpp">
White()</code> and <code class="brush:cpp">
Black()</code> return&nbsp;the color white (RGB value 255,255,255) or 
black (RGB 0,0,0) which can be used to set another (or the calling 
object's) color. In both cases, the alpha channel is set to 255 in the 
object that the color is assign to. Note that these methods are <code class="brush:cpp">
static</code>, which means that they can always be called, even without an actual object. So the following example is valid.</p>
<p>
</p><div><div id="highlighter_655" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp plain">fmx::ColorAutoPtr CAP(4,5,6,175); </code><code class="cpp comments">//a color is set</code></div><div class="line number2 index1 alt1"><code class="cpp plain">*CAP = fmx::CharacterStyle::Color::Black(); </code><code class="cpp comments">//now CAP point to a black Color</code></div></div></td></tr></tbody></table></div></div>
<p>&nbsp;</p>
<p>Now that we have discussed the class <code class="brush:cpp">
Color</code> as one of the features of <code class="brush:cpp">
CharacterStyle</code> class, we can move on with a discussion of the 
latter class. Before discussing all its methods, however, we will first 
look at how we can create a <code class="brush:cpp">
CharacterStyle</code> object. For that, we need a <code class="brush:cpp">
CharacterStyleAutoPtr</code>. This class has three constructors.</p>
<p>
</p><div><div id="highlighter_820055" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp keyword bold">class</code> <code class="cpp plain">CharacterStyleAutoPtr : </code><code class="cpp keyword bold">public</code> <code class="cpp plain">std::auto_ptr&lt;CharacterStyle&gt;</code></div><div class="line number2 index1 alt1"><code class="cpp plain">{</code></div><div class="line number3 index2 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">typedef</code> <code class="cpp plain">CharacterStyleAutoPtr&nbsp;&nbsp; UpCaster;</code></div><div class="line number4 index3 alt1"><code class="cpp spaces">&nbsp;</code><code class="cpp keyword bold">public</code><code class="cpp plain">:</code></div><div class="line number5 index4 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">inline</code> <code class="cpp plain">CharacterStyleAutoPtr ();</code></div><div class="line number6 index5 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">inline</code> <code class="cpp plain">CharacterStyleAutoPtr ( CharacterStyle::FontID font, CharacterStyle::Face face, CharacterStyle::FontSize size,</code></div><div class="line number7 index6 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">const</code> <code class="cpp plain">CharacterStyle::Color &amp;color = CharacterStyle::Color::Black() );</code></div><div class="line number8 index7 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">inline</code> <code class="cpp plain">CharacterStyleAutoPtr ( </code><code class="cpp keyword bold">const</code> <code class="cpp plain">CharacterStyle &amp;style );</code></div><div class="line number9 index8 alt2"><code class="cpp plain">};</code></div></div></td></tr></tbody></table></div></div>
<p>&nbsp;</p>
<p>The first constructor creates an empty <code class="brush:cpp">CharacterStyle</code> object. The second takes three, and an optional fourth, arguments. The first is a <code class="brush:cpp">
FontID</code> (an <code class="brush:cpp">
unsigned short</code>) which is retrieved from Filemaker using a method (from the <code class="brush:cpp">
Data</code> class, discussed in <a href="http://culturalservices.nl/index.php/filemaker-plug-ins/fmxdata-h">FMXData.h</a>)
 which uses a font name and several other parameters. The second 
parameter is the face of the font, which is one of the Face enumeration 
given above. The third is the size in points. The last argument is a <code class="brush:cpp">
Color</code> object, which is set to black (using the <code class="brush:cpp">
static</code> method of the color class) if you do not provide a fourth argument.</p>
<p>The third constructor takes a&nbsp;<code class="brush:cpp">CharacterStyle</code>
 object as argument and sets the new autopointer to point to&nbsp;a copy
 of the object that was passed to it. A fourth constructor is inherited 
from class <code class="brush:cpp">
auto_ptr</code>&nbsp;and takes another autopointer as argument. This 
causes undefined behaviour in Filemaker terms, i.e., Filemaker seems to 
ignore any operations following it.</p>
<p>Thusfar we have seen how we can create a <code class="brush:cpp">
CharacterStyle</code> object. now we can discuss the methods of this class. The header has a comment on these methods that runs as follows.</p>
<blockquote>
<p>These methods enables you to specify only one trait, and not overwrite others. A newly constructed CharacterStyle<span face="Consolas" size="2" color="#008000"><span face="Consolas" size="2" color="#008000"><span face="Consolas" size="2" color="#008000"> will have everything disabled. Using any of the Set methods further down will also enable that trait in this style.</span></span></span><span face="Consolas" size="2" color="#008000"><span face="Consolas" size="2" color="#008000"><span face="Consolas" size="2" color="#008000"> Disabled traits will be defaulted to the settings of the field on the layout.</span></span></span></p>
</blockquote>
<p>Important here is that <code class="brush:cpp">
CharacterStyle</code> objects have all their traits disabled when you 
create them. That means that the defaults are used, which are the ones a
 Filemaker user has set on a field on a layout. If you have created a 
style with font "Times New Roman", the text to which this style is 
applied&nbsp;will&nbsp;show the default for the field,&nbsp;unless you 
have enable the font using method <code class="brush:cpp">
EnableFont</code>. In the same way, you must enable a&nbsp;face if you want it to display, by calling <code class="brush:cpp">
EnableFace</code>, to which you also have to pass a Face enumeration value of the particular face you want to enable. You can use the <code class="brush:cpp">kFace_AllStyles</code>&nbsp;value to enable all the&nbsp;faces that you have set in your <code class="brush:cpp">
CharacterStyle</code> object. Finally the size and color that you have used for you style must be enabled using <code class="brush:cpp">
EnableSize</code> and <code class="brush:cpp">
EnableColor</code>.</p>
<p>Once enabled, all the traits can be diabled again using the appropriate function. The functions used for this are <code class="brush:cpp">
DisableFont</code>, <code class="brush:cpp">DisableFace</code>, <code class="brush:cpp">DisableAllFace</code> (to disable all faces at once), <code class="brush:cpp">DisableSize</code>, <code class="brush:cpp">DisableColor</code>, and finally&nbsp;<code class="brush:cpp">DisableAll</code>, which switches&nbsp;all the traits off, just like when the style was first created.</p>
<p>In order to monitor the enabled/disabled status, you can use the <code class="brush:cpp">
IsEnabled</code> methods. These methods return 0 is the trait is disabled and 1 if enabled. These methods are:</p>
<p>
</p><div><div id="highlighter_27742" class="syntaxhighlighter  cpp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp keyword bold">inline</code> <code class="cpp color1 bold">bool</code> <code class="cpp plain">IsAllDisabled () </code><code class="cpp keyword bold">const</code><code class="cpp plain">;</code></div><div class="line number2 index1 alt1"><code class="cpp keyword bold">inline</code> <code class="cpp color1 bold">bool</code> <code class="cpp plain">IsFontEnabled () </code><code class="cpp keyword bold">const</code><code class="cpp plain">;</code></div><div class="line number3 index2 alt2"><code class="cpp keyword bold">inline</code> <code class="cpp color1 bold">bool</code> <code class="cpp plain">IsFaceEnabled ( Face face ) </code><code class="cpp keyword bold">const</code><code class="cpp plain">;</code></div><div class="line number4 index3 alt1"><code class="cpp keyword bold">inline</code> <code class="cpp color1 bold">bool</code> <code class="cpp plain">IsAnyFaceEnabled () </code><code class="cpp keyword bold">const</code><code class="cpp plain">;</code></div><div class="line number5 index4 alt2"><code class="cpp keyword bold">inline</code> <code class="cpp color1 bold">bool</code> <code class="cpp plain">IsSizeEnabled () </code><code class="cpp keyword bold">const</code><code class="cpp plain">;</code></div><div class="line number6 index5 alt1"><code class="cpp keyword bold">inline</code> <code class="cpp color1 bold">bool</code> <code class="cpp plain">IsColorEnabled () </code><code class="cpp keyword bold">const</code><code class="cpp plain">;</code></div></div></td></tr></tbody></table></div></div>
<p>&nbsp;</p>
<p>These monitor functions are followed by several methods to set traits
 of your style, regardless of whether these traits are enabled or 
disabled. <code class="brush:cpp">
SetFontInformation</code> is used to set three traits of you style at once: the font, the face, and the size. Its counterpart <code class="brush:cpp">
GetFontInformation</code> can be used to retrieve information about 
these traits from the style object. Yoú will have to pass three values 
to the method, which are all set to the traits of your style. You can 
also set these three traits individually using <code class="brush:cpp">
SetFont</code>, <code class="brush:cpp">
SetFace</code>, and <code class="brush:cpp">
SetSize</code>. These three methods have their counterparts to retrieve information about these traits: <code class="brush:cpp">GetFont</code>, <code class="brush:cpp">GetFace</code>, and <code class="brush:cpp">GetSize</code>. The color of your style can be similarly set and retrieved using <code class="brush:cpp">SetColor</code>, and&nbsp;<code class="brush:cpp">GetColor</code>.</p>
<p>Finally, there are two comparison operator function to compare two <code class="brush:cpp">
CharacterStyle</code> objects.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p></p>
<p></p>
<p></p>
	
</div>

						</div>
					
								<div class="clr"></div>
			</div>
		</div>
		<div id="footer">
			<p style="text-align:center;">
 	Van der Linden Cultural Services, Powered by <a href="http://joomla.org/" class="sgfooter" target="_blank">Joomla!</a>

	

	
	

</p>
		</div>
		</div>
	</div>
	<div id="footergrad">&nbsp;</div>

<div style="padding: 0px; border: medium none; margin: 0px; position: absolute; left: 0px; top: 0px; width: 100%; z-index: 1001; direction: ltr;" class="highslide-container"><a style="position: absolute; top: -9999px; opacity: 0.75; z-index: 1;" href="javascript:;" title="Click to cancel" class="highslide-loading">Loading...</a><div style="display: none;"></div><div style="padding: 0px; border: medium none; margin: 0px; visibility: hidden;" class="highslide-viewport highslide-viewport-size"></div><table style="padding: 0px; border: medium none; margin: 0px; visibility: hidden; position: absolute; border-collapse: collapse; width: 0px;" cellspacing="0"><tbody style="padding: 0px; border: medium none; margin: 0px;"><tr style="padding: 0px; border: medium none; margin: 0px; height: auto;"><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll 0px 0px; height: 20px; width: 20px;"></td><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll 0px -40px; height: 20px; width: 20px;"></td><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll -20px 0px; height: 20px; width: 20px;"></td></tr><tr style="padding: 0px; border: medium none; margin: 0px; height: auto;"><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll 0px -80px; height: 20px; width: 20px;"></td><td class="drop-shadow highslide-outline" style="padding: 0px; border: medium none; margin: 0px; position: relative;"></td><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll -20px -80px; height: 20px; width: 20px;"></td></tr><tr style="padding: 0px; border: medium none; margin: 0px; height: auto;"><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll 0px -20px; height: 20px; width: 20px;"></td><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll 0px -60px; height: 20px; width: 20px;"></td><td style="padding: 0px; border: medium none; margin: 0px; line-height: 0; font-size: 0px; background: transparent url(&quot;http://culturalservices.nl/plugins/content/highslide/graphics/outlines/drop-shadow.png&quot;) repeat scroll -20px -20px; height: 20px; width: 20px;"></td></tr></tbody></table></div></body></html>